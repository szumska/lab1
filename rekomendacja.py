###  Wzorowane na przyk≈Çadzie Rona Zacharskiego
##
##
##from math import sqrt
##
##users = {"Ania": {"Blues Traveler": 3.5, "Broken Bells": 2.0, "Norah Jones": 4.5, "Phoenix": 5.0, "Slightly Stoopid": 1.5, "The Strokes": 2.5, "Vampire Weekend": 2.0},
##         "Bonia":{"Blues Traveler": 2.0, "Broken Bells": 3.5, "Deadmau5": 4.0, "Phoenix": 2.0, "Slightly Stoopid": 3.5, "Vampire Weekend": 3.0},
##         "Celina": {"Blues Traveler": 5.0, "Broken Bells": 1.0, "Deadmau5": 1.0, "Norah Jones": 3.0, "Phoenix": 5, "Slightly Stoopid": 1.0},
##         "Dominika": {"Blues Traveler": 3.0, "Broken Bells": 4.0, "Deadmau5": 4.5, "Phoenix": 3.0, "Slightly Stoopid": 4.5, "The Strokes": 4.0, "Vampire Weekend": 2.0},
##         "Ela": {"Broken Bells": 4.0, "Deadmau5": 1.0, "Norah Jones": 4.0, "The Strokes": 4.0, "Vampire Weekend": 1.0},
##         "Fruzia":  {"Broken Bells": 4.5, "Deadmau5": 4.0, "Norah Jones": 5.0, "Phoenix": 5.0, "Slightly Stoopid": 4.5, "The Strokes": 4.0, "Vampire Weekend": 4.0},
##         "Gosia": {"Blues Traveler": 5.0, "Broken Bells": 2.0, "Norah Jones": 3.0, "Phoenix": 5.0, "Slightly Stoopid": 4.0, "The Strokes": 5.0},
##         "Hela": {"Blues Traveler": 3.0, "Norah Jones": 5.0, "Phoenix": 4.0, "Slightly Stoopid": 2.5, "The Strokes": 3.0}
##        }
##
##
##
##def manhattan(rating1, rating2):
##    """Oblicz odleg≈Ço≈õƒá w metryce taks√≥wkowej miƒôdzy dwoma  zbiorami ocen
##       danymi w postaci: {'The Strokes': 3.0, 'Slightly Stoopid': 2.5}
##       Zwr√≥ƒá -1, gdy zbiory nie majƒÖ wsp√≥lnych element√≥w"""
##       
##    # TODO: wpisz kod
##    pass
##
##
##def computeNearestNeighbor(username, users):
##    """dla danego u≈ºytkownika, zwr√≥ƒá listƒô innych u≈ºytkownik√≥w wed≈Çug blisko≈õci preferencji"""
##    distances = []
##    # TODO: wpisz kod
##    return distances
##
##def recommend(username, users):
##    """Zwr√≥ƒá listƒô rekomendacji dla u≈ºytkownika"""
##    # znajd≈∫ preferencje najbli≈ºszego sƒÖsiada
##    nearest = computeNearestNeighbor(username, users)[0][1]
##
##    recommendations = []
##    # zarekomenduj u≈ºytkownikowi wykonawcƒô, kt√≥rego jeszcze nie oceni≈Ç, a zrobi≈Ç to jego najbli≈ºszy sƒÖsiada
##    # TODO: wpisz kod
##    # using the fn sorted for variety - sort is more efficient
##    return sorted(recommendations, key=lambda artistTuple: artistTuple[1], reverse = True)
##
### przyk≈Çady
##
##print( recommend('Hela', users))
###print( recommend('Celina', users))
##

print( "Nazywam siÍ Maria Szumska, mÛj login to: szumska. Jeúli chodzi o temat mojej pracy magisterkiej to jestem na etapie szukania. Najprawdopodobniej bÍdzie to praca na temat: Analizy przestrzenne zdarzeÒ sejsmicznych na obszarze Polski z wykorzystaniem oprogramowania GIS")
print("Wed≥ug mnie w powyøyszm kodzie uøytkownicy przyznajπ oceny wymienionym wykonawcπ. Na podstawie wystawionych ocen znajdowani sπ uøytkownicy o podobnym guúcie muzycznym")
       
